(function(){

  /** @type {import("../htmx").HtmxInternalApi} */
  var api;

  var attrPrefix = 'hx-target-';

  // IE11 doesn't support string.startsWith
  function startsWith(str, prefix) {
    return str.substring(0, prefix.length) === prefix
  }

  /**
   * @param {HTMLElement} elt
   * @param {number} respCode
   * @returns {HTMLElement | null}
   */
  function getRespCodeTarget(elt, respCodeNumber) {
    if (!elt || !respCodeNumber) return null;

    var respCode = respCodeNumber.toString();

    // '*' is the original syntax, as the obvious character for a wildcard.
    // The 'x' alternative was added for maximum compatibility with HTML
    // templating engines, due to ambiguity around which characters are
    // supported in HTML attributes.
    //
    // Start with the most specific possible attribute and generalize from
    // there.
    var attrPossibilities = [
      respCode,

      respCode.substr(0, 2) + '*',
      respCode.substr(0, 2) + 'x',

      respCode.substr(0, 1) + '*',
      respCode.substr(0, 1) + 'x',
      respCode.substr(0, 1) + '**',
      respCode.substr(0, 1) + 'xx',

      '*',
      'x',
      '***',
      'xxx',
    ];
    if (startsWith(respCode, '4') || startsWith(respCode, '5')) {
      attrPossibilities.push('error');
    }

    for (var i = 0; i < attrPossibilities.length; i++) {
      var attr = attrPrefix + attrPossibilities[i];
      var attrValue = api.getClosestAttributeValue(elt, attr);
      if (attrValue) {
        if (attrValue === "this") {
          return api.findThisElement(elt, attr);
        } else {
          return api.querySelectorExt(elt, attrValue);
        }
      }
    }

    return null;
  }

  /** @param {Event} evt */
  function handleErrorFlag(evt) {
    if (evt.detail.isError) {
      if (htmx.config.responseTargetUnsetsError) {
        evt.detail.isError = false;
      }
    } else if (htmx.config.responseTargetSetsError) {
      evt.detail.isError = true;
    }
  }

  htmx.defineExtension('response-targets', {

    /** @param {import("../htmx").HtmxInternalApi} apiRef */
    init: function (apiRef) {
      api = apiRef;

      if (htmx.config.responseTargetUnsetsError === undefined) {
        htmx.config.responseTargetUnsetsError = true;
      }
      if (htmx.config.responseTargetSetsError === undefined) {
        htmx.config.responseTargetSetsError = false;
      }
      if (htmx.config.responseTargetPrefersExisting === undefined) {
        htmx.config.responseTargetPrefersExisting = false;
      }
      if (htmx.config.responseTargetPrefersRetargetHeader === undefined) {
        htmx.config.responseTargetPrefersRetargetHeader = true;
      }
    },

    /**
     * @param {string} name
     * @param {Event} evt
     */
    onEvent: function (name, evt) {
      if (name === "htmx:beforeSwap"    &&
        evt.detail.xhr                &&
        evt.detail.xhr.status !== 200) {
        if (evt.detail.target) {
          if (htmx.config.responseTargetPrefersExisting) {
            evt.detail.shouldSwap = true;
            handleErrorFlag(evt);
            return true;
          }
          if (htmx.config.responseTargetPrefersRetargetHeader &&
            evt.detail.xhr.getAllResponseHeaders().match(/HX-Retarget:/i)) {
            evt.detail.shouldSwap = true;
            handleErrorFlag(evt);
            return true;
          }
        }
        if (!evt.detail.requestConfig) {
          return true;
        }
        var target = getRespCodeTarget(evt.detail.requestConfig.elt, evt.detail.xhr.status);
        if (target) {
          handleErrorFlag(evt);
          evt.detail.shouldSwap = true;
          evt.detail.target = target;
        }
        return true;
      }
    }
  });
})();

(function () {

  /** @type {import("../htmx").HtmxInternalApi} */
  var api;

  htmx.defineExtension('multi-swap', {
    init: function (apiRef) {
      api = apiRef;
    },
    isInlineSwap: function (swapStyle) {
      return swapStyle.indexOf('multi:') === 0;
    },
    handleSwap: function (swapStyle, target, fragment, settleInfo) {
      if (swapStyle.indexOf('multi:') === 0) {
        var selectorToSwapStyle = {};
        var elements = swapStyle.replace(/^multi\s*:\s*/, '').split(/\s*,\s*/);

        elements.map(function (element) {
          var split = element.split(/\s*:\s*/);
          var elementSelector = split[0];
          var elementSwapStyle = typeof (split[1]) !== "undefined" ? split[1] : "innerHTML";

          if (elementSelector.charAt(0) !== '#') {
            console.error("HTMX multi-swap: unsupported selector '" + elementSelector + "'. Only ID selectors starting with '#' are supported.");
            return;
          }

          selectorToSwapStyle[elementSelector] = elementSwapStyle;
        });

        for (var selector in selectorToSwapStyle) {
          var swapStyle = selectorToSwapStyle[selector];
          var elementToSwap = fragment.querySelector(selector);
          if (elementToSwap) {
            api.oobSwap(swapStyle, elementToSwap, settleInfo);
          } else {
            console.warn("HTMX multi-swap: selector '" + selector + "' not found in source content.");
          }
        }

        return true;
      }
    }
  });
})();